import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'org.anarres.jarjar'

repositories {
    mavenCentral()
}

//noinspection GroovyAssignabilityCheck
configurations.implementation {
    resolutionStrategy {
        force "com.android.support:support-annotations:1.1.0"
    }

    // Resolve compileDebugJavaWithJavac and kaptGenerateStubsDebugKotlin with incompatible Java version.
//    tasks.withType(KotlinCompile.class){
//        kotlinOptions {
//            jvmTarget = "1.8"
//        }
//    }
}

android {
    compileSdk rootProject.compileSdk
    // buildToolsVersion rootProject.buildTools

    defaultConfig {
        namespace = 'org.atalk.xryptomail'
        applicationId = "org.atalk.xryptomail"
        testApplicationId = "org.atalk.xryptomail.tests"

        versionCode 19200
        versionName '5.2.0'

        minSdkVersion rootProject.minSdk
        targetSdkVersion rootProject.compileSdk

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        // dataBinding = true

        // for view binding to replace butterKnife in PermissionsActivity:
        viewBinding = true

        // Required for gradle version >= 8.0.0 and above
        buildConfig = true
    }

    buildTypes {
        release {
            // Must set  below two to flase in API-34 release, else crashes in Moshi with
            // Cannot serialize abstract class MessagingControllerCommands$PendingDelete
            shrinkResources = false
            minifyEnabled = false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "DEVELOPER_MODE", "false"
        }

        debug {
            debuggable = true
            buildConfigField "boolean", "DEVELOPER_MODE", "true"
        }
    }

    File cfgFile = project.rootProject.file("settings.signing")
    if (cfgFile != null && cfgFile.exists()) {
        println "### Found settings.signing to prepare signingConfig for release signing"
        signingConfigs {
            release {
                Properties config = new Properties()
                config.load(new FileInputStream(cfgFile))

                storeFile file(config.getProperty('keystore'))
                File propsFile = file(config.getProperty('secure_properties'))
                if (propsFile.exists()) {
                    Properties props = new Properties()
                    props.load(new FileInputStream(propsFile))
                    storePassword props.getProperty('key.store.password')
                    keyAlias props.getProperty('key.store.alias')
                    keyPassword props.getProperty('key.alias.password')
                }
            }
        }
        buildTypes.release.signingConfig = signingConfigs.release
    }

    // for using Apache HTTP Client
    useLibrary 'org.apache.http.legacy'

    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src']

            androidTest.setRoot('tests')

            // Move the build types to build-types/<type>
            // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
            // This moves them out of the default location under src/<type>/... which would
            // conflict with src/ being used by the main source set.
            // Adding new build types or product flavors should be accompanied by a similar customization.
            // debug.setRoot('build-types/debug')
            // release.setRoot('build-types/release')
        }

        release { java.srcDirs = ['src/release/java'] }
        debug { java.srcDirs = ['src/debug/java'] }
    }

    // Do not abort build if lint finds errors
    lintOptions {
        abortOnError false
        disable "ResourceType"
        disable 'NonConstantResourceId'
        lintConfig file("$rootProject.projectDir/config/lint/lint.xml")
    }

    packagingOptions {
        exclude 'mozilla/public-suffix-list.txt'
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/README'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')


    // implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "androidx.annotation:annotation:1.9.1"
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    implementation 'androidx.preference:preference-ktx:1.2.1'

    // implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation "com.google.android.material:material:1.12.0"

    implementation project(':plugins:openpgp-api-lib:openpgp-api')
    // implementation 'org.sufficientlysecure:openpgp-api:11.0'

    implementation 'commons-io:commons-io:2.20.0'
    implementation 'com.beetstra.jutf7:jutf7:1.0.0'
    implementation 'com.github.amlcurran.showcaseview:library:5.4.3'

    // ContactPictureLoader source is not compatible with v4.x.x
    implementation 'com.github.bumptech.glide:glide:3.8.0'

    implementation('com.jakewharton.timber:timber:5.0.1') {
        transitive = false
    }
    implementation 'com.karumi:dexter:6.2.3'

    // DO NOT change; else cannot refresh mailbox
    // ImapConnection.open().enableCompressionIfRequested() does not work with jzlib version 1.1.3
    implementation 'com.jcraft:jzlib:1.0.7'

    implementation 'com.squareup.moshi:moshi:1.15.2'
    implementation 'com.squareup.okio:okio:3.15.0'
    implementation 'com.squareup.retrofit2:retrofit:3.0.0'
    implementation 'com.squareup.retrofit2:converter-gson:3.0.0'
    implementation 'com.splitwise:tokenautocomplete:3.0.2'
    implementation 'com.getkeepsafe.relinker:relinker:1.4.5'

    implementation 'de.cketti.library.changelog:ckchangelog:1.2.2'
    implementation 'de.cketti.safecontentresolver:safe-content-resolver-v21:1.0.0'

    implementation 'me.zhanghai.android.materialprogressbar:library:1.6.1'
    implementation 'me.leolin:ShortcutBadger:1.1.22'
    implementation 'net.jcip:jcip-annotations:1.0'

    // NoClassDefFoundError: Failed resolution of: Ljava/time/format/DateTimeFormatterBuilder
    implementation 'org.apache.james:apache-mime4j-core:0.8.13'
    implementation 'org.apache.james:apache-mime4j-dom:0.8.13'
    // implementation 'org.apache.httpcomponents:httpcore:4.4.16'

    // implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.6.21"
    implementation 'org.jsoup:jsoup:1.21.1'
    // implementation 'org.slf4j:slf4j-log4j12:2.0.17'


    implementation 'dnsjava:dnsjava:3.6.3'
    // Required for API-24
//    implementation 'org.threeten:threetenbp:1.7.1'
//    implementation jarjar.repackage('dnsjava-3.6.3.jar') {
//        from('dnsjava:dnsjava:3.6.3') {
//            transitive = false
//        }
//
//        // Duration was added in API level-26; see https://github.com/JakeWharton/ThreeTenABP
//        classRename 'java.time.Duration', 'org.threeten.bp.Duration'
//    }
}

/*
 * Generate the version.properties file with the actual build versionName and versionCode.
 * The version.properties is retrieved during app update check to asses if there is a new update
 */
task updateVersionFile(type: Copy) {
    description = '<!-- Generate version.properties file -->'

    def versionName = android.defaultConfig.versionName
    def versionCode = android.defaultConfig.versionCode
    def date = new Date()
    // ******************************************
    println "*** " + description
    println "# Date: " + date
    println "# last_version = " + versionName
    println "# last_version_code = " + versionCode

    outputs.upToDateWhen {
        false
    }
    from('lib/version.properties') {
        // Substitute property tokens in files
        expand(DATE: date, BUILD_VERSION: versionName, BUILD_VERSION_CODE: versionCode)
    }
    into 'release'
}

build.dependsOn 'updateVersionFile'

//task run(type: Exec, dependsOn: 'installDebug') {
//    // windows: adb + environment setup
//    commandLine 'cmd', '/c', 'adb', 'shell', 'am', 'start', '-n', 'org.atalk.xryptomail/.activity.Splash', '-D'
//}

// Uncomment below lines if you want to show all deprecated warnings
tasks.withType(JavaCompile) {
    // options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

build.dependsOn 'updateVersionFile'